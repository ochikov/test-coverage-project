{ '/Users/ognyanchikov/Etherlime/etherlime/debuggerContracts/contracts/FoodCart.sol': { file: '/Users/ognyanchikov/Etherlime/etherlime/debuggerContracts/contracts/FoodCart.sol',
	  body: 'pragma solidity ^0.5.0;\n\ncontract FoodCart{\n\t /* set owner of contract */\n\taddress owner;\n\n\t /* a variable to track the most recent sku of a food item */\n\tuint8 skuCount; \n\n\t /* an enum to store food item state */\n\tenum State {ForSale, Sold
			}\n\n\t /* add event to emit when a new food item is added to cart */\n\tevent ForSale(string name, uint8 sku, uint16 price, uint8 state, bool foodItemExist);\n\n\t /* add event to emit when a new food item is sold */\n\tevent Sold(string name, uint8 sku, uint16 price, uint8 state, bool foodItemExist);\n\n\t /* a struct to store details of a food item */\n\tstruct FoodItem {\n\t\tstring name;\n\t\tuint8 sku;\n\t\tuint16 price;\n\t\tState state;\n\t\tbool foodItemExist;\n\t
			}\n\n\t /* a map that maps sku to food item */\n\tmapping (uint8 => FoodItem) public foodItems;\n\t\n\t /* a modifier to check that food item exist */\n\tmodifier doesFoodItemExist(uint8 _sku){\n\t\trequire(foodItems[_sku
				].foodItemExist);\n\t\t_;\n\t
			}\n\t\n\t /* a modifier to check that an item is forsale */\n\tmodifier isFoodItemForSale(uint8 _sku){\n\t\trequire(foodItems[_sku
				].state == State.ForSale);\n\t\t_;\n\t
			}\n\n\t /* a modifier to check that the right price is paid for the food item */\n\tmodifier hasBuyerPaidEnough(uint16 _price){\n\t\trequire(msg.value >= _price);\n\t\t_;\n\t
			}\n\n\tconstructor() public {\n\t\towner = msg.sender;\n\t\tskuCount = 0;\n\t
			}\n\n\t\n\tfunction addFoodItem (string memory _name, uint16 _price) public {\n\t\tfoodItems[skuCount
				] = FoodItem({name: _name, \n\t\t\t\t\t\tsku: skuCount, \n\t\t\t\t\t\tprice: _price, \n\t\t\t\t\t\tstate: State.ForSale, \n\t\t\t\t\t\tfoodItemExist: true
				});\n\t\temit ForSale(_name, skuCount , _price, uint8(State.ForSale), true);\n\t\tskuCount = skuCount + 1;\n\t
			}  \n\n\tfunction buyFoodItem (uint8 _sku)\n\tpayable\n\tpublic\n\tdoesFoodItemExist(_sku)\n\tisFoodItemForSale(_sku)\n\thasBuyerPaidEnough(foodItems[_sku
			].price)\n\t{\n\t\tfoodItems[_sku
				].state = State.Sold;\n\t\tfoodItems[_sku
				].foodItemExist = false;\n\t\temit Sold(foodItems[_sku
				].name, \n\t\t\t  foodItems[_sku
				].sku, \n\t\t\t  foodItems[_sku
				].price, \n\t\t\t  uint8(foodItems[_sku
				].state), \n\t\t\t  foodItems[_sku
				].foodItemExist);\n\t
			}\n\n\tfunction fetchFoodItem(uint8 _sku) \n\tdoesFoodItemExist(_sku)\n\tpublic \n\tview \n\treturns (string memory name, uint8 sku, uint16 price, uint8 state, bool foodItemExist){\n\t\tname = foodItems[_sku
				].name;\n\t\tsku = foodItems[_sku
				].sku;\n\t\tprice = foodItems[_sku
				].price;\n\t\tstate = uint8(foodItems[_sku
				].state);\n\t\tfoodItemExist = foodItems[_sku
				].foodItemExist;\n\n\t\treturn (name, sku, price, state, foodItemExist);\n\t
			}\n\n\tfunction () external payable {\n\n\t
			}\n
		}',
	  source: 
	   FS {
		 working_directory: '/Users/ognyanchikov/Etherlime/etherlime/debuggerContracts',
		 contracts_build_directory: '/Users/ognyanchikov/Etherlime/etherlime/debuggerContracts/./build'
		}
	},
   '/Users/ognyanchikov/Etherlime/etherlime/debuggerContracts/contracts/LimeFactory.sol': { file: '/Users/ognyanchikov/Etherlime/etherlime/debuggerContracts/contracts/LimeFactory.sol',
	  body: 'pragma solidity ^0.5.0;\n\ncontract LimeFactory {\n\n    event FreshLime(string name);\n\n    struct Lime {\n        string name;\n        uint8 carbohydrates;\n        uint8 fat;\n        uint8 protein;\n
			}\n\n    Lime[] public limes;\n\n    function createLime(string memory _name, uint8 _carbohydrates, uint8 _fat, uint8 _protein) public {\n        require(_carbohydrates != 0);\n        limes.push(Lime(_name, _carbohydrates, _fat, _protein));\n        emit FreshLime(_name);\n
			}\n
		}',
	  source: 
	   FS {
		 working_directory: '/Users/ognyanchikov/Etherlime/etherlime/debuggerContracts',
		 contracts_build_directory: '/Users/ognyanchikov/Etherlime/etherlime/debuggerContracts/./build'
		}
	},
   '/Users/ognyanchikov/Etherlime/etherlime/debuggerContracts/contracts/SafeMath.sol': { file: '/Users/ognyanchikov/Etherlime/etherlime/debuggerContracts/contracts/SafeMath.sol',
	  body: 'pragma solidity ^0.5.1;\n\n\n /**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n
				}\n    c = a * b;\n    assert(c / a == b);\n    return c;\n
			}\n\n /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n',
	  source: 
	   FS {
		 working_directory: '/Users/ognyanchikov/Etherlime/etherlime/debuggerContracts',
		 contracts_build_directory: '/Users/ognyanchikov/Etherlime/etherlime/debuggerContracts/./build'
				}
			}
		}